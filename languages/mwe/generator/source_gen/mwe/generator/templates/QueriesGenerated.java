package mwe.generator.templates;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.template.MapSrcMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.MapSrcMacroPostProcContext;
import java.util.Map;
import jetbrains.mps.generator.impl.query.ReferenceTargetQuery;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.generator.impl.query.MapNodeQuery;
import jetbrains.mps.generator.impl.query.MapPostProcessor;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static Object referenceReduction_GetReferent_2_ewapjk_a0(final ReferenceMacroContext _context) {
    SNode node_out = _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(_context.getNode(), LINKS.element$G6$O), "withdata");
    _context.showWarningMessage(_context.getNode(), "reducref input " + SNodeOperations.getPointer(_context.getNode()));
    _context.showWarningMessage(SLinkOperations.getTarget(_context.getNode(), LINKS.element$G6$O), "reducref input.element " + SLinkOperations.getPointer(_context.getNode(), LINKS.element$G6$O));
    _context.showWarningMessage(node_out, "reducref output " + SNodeOperations.getPointer(node_out));
    return node_out;
  }
  public static SNode mapSrcMacro_map_1_0(final MapSrcMacroContext _context) {
    SNode ewd = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xeef61dc3149546d5L, 0x88b81405dbdadb08L, 0x8756ce0147fa97aL, "mwe.structure.ElementWithData"));
    SPropertyOperations.assign(ewd, PROPS.name$MnvL, SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL) + " with data");
    // Some more involved Java code would happen here
    SPropertyOperations.assign(ewd, PROPS.data$dpus, "Some data for element " + SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL));
    _context.showWarningMessage(_context.getNode(), "map_Element input " + SNodeOperations.getPointer(_context.getNode()));
    _context.showWarningMessage(ewd, "map_Element output " + SNodeOperations.getPointer(ewd));
    return ewd;
  }
  public static void mapSrcMacro_post_1_0(final MapSrcMacroPostProcContext _context) {
    _context.showWarningMessage(_context.getNode(), "map_Element postproc input " + SNodeOperations.getPointer(_context.getNode()));
    _context.showWarningMessage(_context.getOutputNode(), "map_Element postproc outputNode " + SNodeOperations.getPointer(_context.getOutputNode()));
  }
  private final Map<String, ReferenceTargetQuery> rtqMethods = new HashMap<String, ReferenceTargetQuery>();
  {
    rtqMethods.put("609513034250997409", new RTQ(0, null));
  }
  @NotNull
  @Override
  public ReferenceTargetQuery getReferenceTargetQuery(@NotNull QueryKey queryKey) {
    ReferenceTargetQuery query = queryKey.forTemplateNode(rtqMethods);
    return (query != null ? query : super.getReferenceTargetQuery(queryKey));
  }
  private static class RTQ extends ReferenceTargetQuery.Base {
    private final int methodKey;
    /*package*/ RTQ(int methodKey, String templateValue) {
      super(templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull ReferenceMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.referenceReduction_GetReferent_2_ewapjk_a0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, MapNodeQuery> mnqMethods = new HashMap<String, MapNodeQuery>();
  {
    mnqMethods.put("609513034250964365", new MNQ(0));
  }
  @NotNull
  @Override
  public MapNodeQuery getMapNodeQuery(@NotNull QueryKey queryKey) {
    MapNodeQuery query = queryKey.forTemplateNode(mnqMethods);
    return (query != null ? query : super.getMapNodeQuery(queryKey));
  }
  private static class MNQ implements MapNodeQuery {
    private final int methodKey;
    /*package*/ MNQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public SNode evaluate(@NotNull MapSrcMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.mapSrcMacro_map_1_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, MapPostProcessor> mppMethods = new HashMap<String, MapPostProcessor>();
  {
    mppMethods.put("609513034250964365", new PPQ(0));
  }
  @NotNull
  @Override
  public MapPostProcessor getMapPostProcessor(@NotNull QueryKey queryKey) {
    MapPostProcessor query = queryKey.forTemplateNode(mppMethods);
    return (query != null ? query : super.getMapPostProcessor(queryKey));
  }
  private static class PPQ implements MapPostProcessor {
    private final int methodKey;
    /*package*/ PPQ(int methodKey) {
      this.methodKey = methodKey;
    }
    public void invoke(@NotNull MapSrcMacroPostProcContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          QueriesGenerated.mapSrcMacro_post_1_0(ctx);
          return;
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink element$G6$O = MetaAdapterFactory.getReferenceLink(0xeef61dc3149546d5L, 0x88b81405dbdadb08L, 0x8756ce0147f6607L, 0x8756ce0147f6c8aL, "element");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty data$dpus = MetaAdapterFactory.getProperty(0xeef61dc3149546d5L, 0x88b81405dbdadb08L, 0x8756ce0147fa97aL, 0x8756ce0147fb1e9L, "data");
  }
}
